{"version":3,"sources":["images/machine.jpg","images/chips.jfif","images/pepsi.jpg","images/swiss-roll.webp","NavBar.js","VendingMachine.js","Chips.js","Pepsi.js","SwissRoll.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","exact","activeClassName","to","Component","VendingMachine","src","machine","alt","Chips","chips","Pepsi","pepsi","SwissRoll","swiss","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,0OCyB5BC,G,6KAnBX,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAASC,OAAK,EAACC,gBAAgB,SAASC,GAAG,KAA3C,QAGA,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,SAASC,GAAG,UAA3C,SAGA,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,SAASC,GAAG,UAA3C,SAGA,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,SAASC,GAAG,eAA3C,kB,GAbaC,c,iBCWNC,E,uKAVX,OACE,6BACE,+CACA,6DACA,yBAAKC,IAAKC,IAASC,IAAI,iB,GANFJ,a,iBCWdK,E,uKATX,OACE,6BACE,qCACA,yBAAKH,IAAKI,IAAOF,IAAI,e,GALTJ,a,iBCWLO,E,uKATX,OACE,6BACE,qCACA,yBAAKL,IAAKM,IAAOJ,IAAI,e,GALTJ,a,iBCWLS,E,uKATX,OACE,6BACE,yCACA,yBAAKP,IAAKQ,IAAON,IAAI,oB,GALLJ,aCkBTW,MAZf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACe,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOJ,OAAK,EAACe,KAAK,SAASC,UAAWN,IACtC,kBAAC,IAAD,CAAOV,OAAK,EAACe,KAAK,SAASC,UAAWR,IACtC,kBAAC,IAAD,CAAOR,OAAK,EAACe,KAAK,cAAcC,UAAWJ,MCJ7BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c7199b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/machine.416c7ae8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chips.af3ab921.jfif\";","module.exports = __webpack_public_path__ + \"static/media/pepsi.dfe366ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/swiss-roll.1219aa1f.webp\";","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./NavBar.css\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"NavBar\">\r\n        <NavLink exact activeClassName=\"active\" to=\"/\">\r\n          Home\r\n        </NavLink>\r\n        <NavLink exact activeClassName=\"active\" to=\"/pepsi\">\r\n          Pepsi\r\n        </NavLink>\r\n        <NavLink exact activeClassName=\"active\" to=\"/chips\">\r\n          Chips\r\n        </NavLink>\r\n        <NavLink exact activeClassName=\"active\" to=\"/swiss-roll\">\r\n          SwissRoll\r\n        </NavLink>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport machine from \"./images/machine.jpg\";\r\n\r\nclass VendingMachine extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>VENDING MACHINE</h1>\r\n        <h3>What would you like to take ?</h3>\r\n        <img src={machine} alt=\"machine\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VendingMachine;\r\n","import React, { Component } from \"react\";\r\nimport chips from \"./images/chips.jfif\";\r\n\r\nclass Chips extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Chips</h1>\r\n        <img src={chips} alt=\"chips\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chips;\r\n","import React, { Component } from \"react\";\r\nimport pepsi from \"./images/pepsi.jpg\";\r\n\r\nclass Pepsi extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Pepsi</h1>\r\n        <img src={pepsi} alt=\"pepsi\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pepsi;\r\n","import React, { Component } from \"react\";\r\nimport swiss from \"./images/swiss-roll.webp\";\r\n\r\nclass SwissRoll extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>SwissRoll</h1>\r\n        <img src={swiss} alt=\"swiss-roll\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SwissRoll;\r\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport NavBar from \"./NavBar\";\nimport VendingMachine from \"./VendingMachine\";\nimport Chips from \"./Chips\";\nimport Pepsi from \"./Pepsi\";\nimport SwissRoll from \"./SwissRoll\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Route exact path=\"/\" component={VendingMachine} />\n      <Route exact path=\"/pepsi\" component={Pepsi} />\n      <Route exact path=\"/chips\" component={Chips} />\n      <Route exact path=\"/swiss-roll\" component={SwissRoll} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}